// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)


#define _XTAL_FREQ 20000000
#include <stdio.h>
#include <xc.h>


void __interrupt() ISR(void)
{
    if(INTCONbits.INTF == 1)
    {
        PORTBbits.RB1 = ~PORTBbits.RB1;
        INTCONbits.INTF = 0;
    }
}
void main(void) {
    
    TRISB0 = 1;
    TRISB1 = 0;
    PORTB = 0;
    PORTBbits.RB1 = 1;
    
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.INTE = 1;
    
    OPTION_REGbits.INTEDG = 1;

    while(1)
    {
        
    }
    return;
}
8.bluetooth
#include <xc.h>

// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

unsigned char y=0;

void __interrupt() RECEIVE(void)
{
if(PIR1bits.RCIF == 1)//RCIF flag is cleared when RCREG is read
{
    y = RCREG;
}
}
void main(void) {

INTCONbits.GIE = 1;//Global Interrupt Enable
INTCONbits.PEIE = 1; //Peripheral Interrupt Enable
PIE1bits.RCIE = 1;// Receive Interrupt Enable(for UART Receive Interrupt)

TXSTA = 0x24;//Transmit Status and Control Register
RCSTA = 0x90;//Receive Status and Control Register

SPBRG = 129;//Baud rate is 9600 Hz and oscillator freq is 20MHz

TRISC6 = 0; // TX (RC6) as output
TRISC7 = 1; // RX (RC7) as input
TRISB7 = 0; // RB7 as output

while(1)
{
    if(y == 'a')
        PORTBbits.RB7 = 1;
    if (y == 'b')
        PORTBbits.RB7 = 0;
}
return;
}
