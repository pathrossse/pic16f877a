// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#include <pic16f877a.h>
#define _XTAL_FREQ 20000000

unsigned int a;

//Write data to SPI bus
void spi_write (unsigned int value)
{
    SSPBUF = value;
    while(!SSPSTATbits.BF);
}

//Read data from SPI bus
unsigned char spi_read()
{
    SSPBUF = 0x00; //initiate bus cycle
    while(!PIR1bits.SSPIF);//wait until cycle complete(set when in ISR- I2C, SPI, UART)
    return(SSPBUF);
}

//Write to 25AA160A EEPROM
void write_to_25AA160A(unsigned char msb, unsigned char lsb, unsigned char data)
{
    PORTBbits.RB0 = 0;
        spi_write(0x02);
        spi_write(msb);
        spi_write(lsb);
        spi_write(data);
    PORTBbits.RB1 = 1;
}

//Read from 25AA160A EEPROM
void read_from_25AA160A( unsigned char msb, unsigned char lsb)
{
    PORTBbits.RB0 = 0;
        spi_write(0x03);
        spi_write(msb);
        spi_write(lsb);
        while(!SSPSTATbits.BF);
        a = (spi_read());
    PORTBbits.RB0 = 1;
}
 
void main(void) {
    
    TRISCbits.TRISC0 = 0;// Serial Clock as Output
    TRISCbits.TRISC4 = 1; // MISO AS INPUT
    TRISCbits.TRISC5 = 0;// MOSI as OUTPUT
    TRISBbits.TRISB0 = 0; //Slave Select Pin as Output
    
    SSPCON = 0x20;
    SSPSTAT = 0x00;
    
    //Write enable sequence for EEPROM
    PORTBbits.RB0 = 0;//slave select low
    spi_write(0x06);
    PORTBbits.RB0 = 1;//slave select high
    
    write_to_25AA160A(0x03, 0x43,0x09); //0x0343 = 09(msb,lsb,data)
    __delay_ms(1000);
    
    //Write Disable sequence for EEPROM
    PORTBbits.RB0 = 0 ;//slave select low
    spi_write(0x04);
    PORTBbits.RB0 = 1;//slave select high
    
    
    __delay_ms(1000);
    read_from_25AA160A(0x03,0x43);//address = 0x0342
    

    return;
}
