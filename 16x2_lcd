#include <xc.h>
#include <stdio.h>

#define _XTAL_FREQ 20000000

#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#define RS PORTCbits.RC1
#define RW PORTCbits.RC0
#define EN PORTCbits.RC2

void lcd_data(unsigned char data)
{
    PORTD = data;
    RS = 1;
    RW = 0;
    EN = 1;
    __delay_ms(50);
    EN=0;
}

void lcd_cmd (unsigned char cmd)
{
    PORTD = cmd;
    RS = 0;
    RW = 0;
    EN = 1;
    __delay_ms(1000); 
    EN=0;
}

void lcd_string (const unsigned char *str, unsigned char num)//str = system
{
    unsigned char i;
    for ( i=0;i<num;i++)
        lcd_data(str[i]);
}

void lcd_initialise()
{
    lcd_cmd(0x38);//16x2 model
    lcd_cmd(0x06);//shift cursor right
    lcd_cmd(0x0C);//LCD On, cursor off
    lcd_cmd(0x01);//clear display screen
    
}
int main(void) {
    TRISD = 0x00;
    TRISC = 0x00;
    __delay_ms(500); 
    lcd_initialise();
    while (1) {
        lcd_cmd(0x83);
        lcd_string("PETER",5);
        lcd_cmd(0xC3);
        lcd_string("HI",2);
         __delay_ms(1000); 
    }
    return 0;
}
