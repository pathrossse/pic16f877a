#include <stdio.h>
#include <xc.h>
#define _XTAL_FREQ 20000000

// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = ON         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

unsigned char keys[4][3] = {{1,2,3},{4,5,6},{7,8,9},{0,0,0}};

void main(void) {
    TRISB = 0xF0;
    PORTB = 0x0F;//Ground Columns initially
    ADCON1 = 0x0F;// All digital
    TRISA = 0;//Port A as output
    PORTA = 0;
    INTCONbits.RBIE =1; //PORTB on change interrupt
    INTCONbits.GIE = 1; //Enable global interrupts
    OPTION_REGbits.nRBPU = 0; //enable pull up resistors
    
    while(1);
}

void __interrupt() ISR(void)
{
    if(INTCONbits.RBIF == 1)
    {
        unsigned char row = 0xFF, col= 0xFF;
        
        //Scan rows
        unsigned char rowVal = PORTB & 0xF0;
        switch(rowVal)
        {
            case 0xE0: row = 0;break;
            case 0xD0: row = 1;break;
            case 0xB0 : row = 2; break;
            case 0x70 : row = 3; break;
            default : INTCONbits.RBIF = 0;return;
        }
        //Scan columns
        for(unsigned char i = 0; i<3;i++)
        {
            PORTB = (unsigned char)(~(1 << i));//Ground one column at a time
            __delay_ms(10);//Debounce delay
            
            if((PORTB & 0xF) != 0xF0)
            {
                col = i;
                break;
            }
         }
        
        if(row != 0xFF && col != 0xFF)
        {
            PORTA = keys[row][col];
        }
        PORTB = 0x0F; //Reset columns
        INTCONbits.RBIF = 0; //Clear interrupt flag
    }
}

